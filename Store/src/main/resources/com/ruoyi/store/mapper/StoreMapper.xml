<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.store.mapper.StoreMapper">

    <resultMap type="Store" id="StoreResult">
        <result property="id"    column="id"    />
        <result property="name"    column="name"    />
        <result property="address"    column="address"    />
        <result property="type"    column="type"    />
        <result property="status"    column="status"    />
        <association property="merchants" javaType="com.ruoyi.merchants.domain.Merchants">
            <result property="id" column="m_id"></result>
            <result property="name" column="m_name"></result>
            <result property="phone" column="phone"></result>
        </association>
    </resultMap>

    <sql id="selectStoreVo">
        select s.id,s.name,s.address,s.type,s.status,m.id as m_id,m.name as m_name,m.phone from ry.store s
            left join ry.merchants_store ms on s.id = ms.sid
            left join ry.merchants m on ms.mid = m.id
    </sql>

    <select id="selectStoreList" parameterType="Store" resultMap="StoreResult">
        <include refid="selectStoreVo"/>
        <where>
            <if test="name != null  and name != ''"> and s.name like concat('%', #{name}, '%')</if>
            <if test="address != null  and address != ''"> and s.address = #{address}</if>
            <if test="type != null  and type != ''"> and s.type = #{type}</if>
            <if test="status != null  and status != ''"> and status = #{status}</if>
        </where>
    </select>

    <select id="selectStoreById" parameterType="Long" resultMap="StoreResult">
        <include refid="selectStoreVo"/>
        where s.id = #{id}
    </select>

    <insert id="insertStore" parameterType="Store" useGeneratedKeys="true" keyProperty="id">
        insert into store
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">name,</if>
            <if test="address != null">address,</if>
            <if test="type != null">type,</if>
            <if test="status != null">status,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">#{name},</if>
            <if test="address != null">#{address},</if>
            <if test="type != null">#{type},</if>
            <if test="status != null">#{status},</if>
        </trim>
    </insert>

    <update id="updateStore" parameterType="Store">
        update store
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null">name = #{name},</if>
            <if test="address != null">address = #{address},</if>
            <if test="type != null">type = #{type},</if>
            <if test="status != null">status = #{status},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteStoreById" parameterType="Long">
        delete from store where id = #{id}
    </delete>

    <delete id="deleteStoreByIds" parameterType="String">
        delete from store where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>
